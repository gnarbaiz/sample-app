apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply plugin: 'androidx.navigation.safeargs.kotlin'

androidExtensions {
    experimental = true
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId "com.gnarbaiz.android.news"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        buildConfigField "String", "NEWS_API_KEY", "\"${getProperty("local.properties", "news_api_key")}\""
        buildConfigField "String", "NEWS_BASE_URL", "\"https://newsapi.org/\""
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }

    dataBinding {
        enabled = true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    // Support libraries
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$version_kotlin"
    implementation "androidx.appcompat:appcompat:$version_support"
    implementation "androidx.constraintlayout:constraintlayout:$version_constraint_layout"
    implementation "com.google.android.material:material:$version_material"
    implementation "androidx.palette:palette:$version_palette"
    implementation "androidx.test.espresso:espresso-idling-resource:$version_espresso"

    // Android KTX
    implementation "androidx.core:core-ktx:$version_core"

    // Navigation
    implementation "androidx.navigation:navigation-fragment-ktx:$version_navigation"

    // Architecture components
    implementation "androidx.lifecycle:lifecycle-extensions:$version_lifecycle_extensions"
    implementation "android.arch.persistence.room:runtime:$version_room"
    kapt "android.arch.persistence.room:compiler:$version_room"

    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$version_coroutine"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$version_coroutine"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$version_retrofit"
    implementation "com.squareup.retrofit2:converter-moshi:$version_retrofit"
    implementation "com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:$version_coroutines_adapter"

    // Network
    implementation "com.squareup.okhttp3:logging-interceptor:$version_okhttp"
    implementation "com.squareup.picasso:picasso:$version_picasso"
    implementation "com.github.florent37:picassopalette:$version_picasso_palette"

    // Moshi for parsing the JSON format
    implementation "com.squareup.moshi:moshi:$version_moshi"
    implementation "com.squareup.moshi:moshi-kotlin:$version_moshi"

    // WorkManager
    implementation "androidx.work:work-runtime-ktx:$version_work"

    // Timber
    implementation "com.jakewharton.timber:timber:$version_timber"

    // Dependencies for local unit tests
    testImplementation "org.mockito:mockito-core:$version_mockito"

    // Dependencies for Instrumentation tests
    androidTestImplementation "androidx.test.ext:junit:$version_junit_ext"

    // Espresso UI Testing
    androidTestImplementation "androidx.test.espresso:espresso-core:$version_espresso"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$version_espresso"

    // Testing Architecture components
    testImplementation "android.arch.core:core-testing:$version_lifecycle_extensions"

    // Android Testing Support Library's runner and rules
    androidTestImplementation "androidx.test:runner:$version_runner"
    androidTestImplementation  "androidx.test:rules:$version_rules"
}

def getProperty(String filename, String propName) {
    def propsFile = rootProject.file(filename)
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        if (props[propName] != null) {
            return props[propName]
        } else {
            print("No such property " + propName + " in file " + filename)
        }
    } else {
        print(filename + " does not exist!")
    }
}